(books-by-author china books)
(defn books-by-author [author books]
  (filter has-author? author books))
(books-by-author china books)
(defn books-by-author [author books]
  (filter (has-author? author) books))
(books-by-author china books)
(defn books-by-author [author books]
  (filter (fn [book] (has-author? book author)) book))
j(defn books-by-author [author books]
  (filter (fn [book] (has-author? book author)) books))
(defn books-by-author [author books]
  (filter (fn [book] (has-author? book author)) books))
(books-by-author china books)
(books-by-author octavia books)
(def authors #{china, felleisen, octavia, friedman})
(defn author-by-name [name authors]
  (:name authors))
(author-by-name "Octavia E. Butler" authors) 
(defn author-by-name [name authors]
  (filter (contains? name authors) authors))
(author-by-name "Octavia E. Butler" authors) 
(defn author-by-name [name authors]
  (filter (contains? authors name) authors))
(author-by-name "Octavia E. Butler" authors) 
(defn author-by-name [name authors]
  (filter (fn [author] (= name (:name author)) authors)))
(author-by-name "Octavia E. Butler" authors) 
(defn author-by-name [name authors]
  (first(filter (fn [author] (= name (:name author)) authors))))
(author-by-name "Octavia E. Butler" authors) 
(defn author-by-name [name authors]
  (first (filter (fn [author] (= name (:name author))) authors)))
(author-by-name "Octavia E. Butler" authors) 
(defn author-by-name [name authors]
  (filter (fn [author] (= name (:name author))) authors))
(author-by-name "Octavia E. Butler" authors) 
(author-by-name "Octavia E. Butler" #{felleisen, friedman})
(defn author-by-name [name authors]
  (first (filter (fn [author] (= name (:name author))) authors)))
(author-by-name "Octavia E. Butler" #{felleisen, friedman})
(author-by-name "China Miéville" authors)
(author-by-name "Goerge R. R. Martin" authors) 
(defn living-authors [authors]
  (filter alive? authors))
(defn living-authors [authors]
  (filter alive? authors))
(defn alive? [author]
  (not (contains? author :death-year)))
(defn living-authors [authors]
  (filter alive? authors))
(living-authors authors)  
(living-authors #{octavia})
(living-authors #{china, felleisen})
(def jrrtolkien {:name "J. R. R. Tolkien" :birth-year 1892 :death-year 1973})
(def christopher {:name "Christopher Tolkien" :birth-year 1924})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})
(def silmarillion {:title "Silmarillion"
                   :authors #{jrrtolkien, christopher, kay}})(def dick {:name "Philip K. Dick", :birth-year 1928, :death-year 1982})
(def zelazny {:name "Roger Zelazny", :birth-year 1937, :death-year 1995})
(def deus-irae {:title "Deus Irae", :authors #{dick, zelazny}})
(def jrrtolkien {:name "J. R. R. Tolkien" :birth-year 1892 :death-year 1973})
(def christopher {:name "Christopher Tolkien" :birth-year 1924})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})
(def silmarillion {:title "Silmarillion"
                   :authors #{jrrtolkien, christopher, kay}})
(def dick {:name "Philip K. Dick", :birth-year 1928, :death-year 1982})
(def zelazny {:name "Roger Zelazny", :birth-year 1937, :death-year 1995})
(def deus-irae {:title "Deus Irae", :authors #{dick, zelazny}})
(defn has-a-living-author? [book]
  (:authors book))
(has-a-living-author? wild-seed)    
(defn has-a-living-author? [book]
  (filter alive? (:authors book)))
(has-a-living-author? wild-seed)    
(has-a-living-author? wild-seed)
(defn has-a-living-author? [book]
  (empty? (filter alive? (:authors book))))
(defn has-a-living-author? [book]
  (empty? (filter alive? (:authors book))))
(has-a-living-author? wild-seed) 
(defn has-a-living-author? [book]
  (not (empty? (filter alive? (:authors book)))))
(has-a-living-author? wild-seed) 
(has-a-living-author? silmarillion) 
(has-a-living-author? little-schemer)
(has-a-living-author? cities)
(has-a-living-author? deus-irae) 
(defn books-by-living-authors [books]
  (filter (fn [book] (alive? author)) books))
(defn books-by-living-authors [books]
  (filter has-a-living-author? books))
(books-by-living-authors books)
(books-by-living-authors (concat books [deus-irae, silmarillion]))
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books) ("."))
    (> (count books) 1) (apply str (count books)" books. "(map book->string books)("."))
    :else "No books."))
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books) ("."))
    (> (count books) 1) (apply str (count books)" books. "(map book->string books)("."))
    :else "No books."))
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors #{china}})
(def wild-seed {:title "Wild Seed", :authors #{octavia}})
(def embassytown {:title "Embassytown", :authors #{china}})
(def little-schemer {:title "The Little Schemer"
                     :authors #{friedman, felleisen}})
(def books [cities, wild-seed, embassytown, little-schemer])
(books->string [])
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books)".")
    (> (count books) 1) (apply str (count books)" books. "(map book->string books)".")
    :else "No books."))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books) ".")
    (> (count books) 1) (apply str (count books)" books. "(map book->string books) ".")
    :else "No books."))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books) "abs")
    (> (count books) 1) (apply str (count books)" books. "(map book->string books) "asv")
    :else "No books.")
jj(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books) "abs")
    (> (count books) 1) (apply str (count books)" books. "(map book->string books) "asv")
    :else "No books."))
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books) "abs")
    (> (count books) 1) (apply str (count books)" books. "(map book->string books) "asv")
    :else "No books."))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "((map book->string books) ".")
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "((map book->string books) ".")
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books.")))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books)
    (> (count books) 1) (apply str (count books)" books. "(map book->string books)
    :else "No books.")))
kk(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books)
    (> (count books) 1) (apply str (count books)" books. "(map book->string books)
    :else "No books."))))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))"."
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))"."
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(books->string [cities])
(defn book->string [book]
  (let [titulo
        (:title book)
        autor
        (authors->string (:authors book))]
    (apply str (interpose ", written by " [titulo autor]) ".")))
(book->string wild-seed)
(defn book->string [book]
  (let [titulo
        (:title book)
        autor
        (authors->string (:authors book))]
    (apply str (interpose ", written by " [titulo autor]))))
(book->string wild-seed)
(defn book->string [book]
  (let [titulo
        (:title book)
        autor
        (authors->string (:authors book))]
    (apply str (interpose ", written by " [titulo autor]) ", written by " )))
(defn book->string [book]
  (let [titulo
        (:title book)
        autor
        (authors->string (:authors book))]
    (apply str (interpose ", written by " [titulo autor]) ", written by " )))
(defn book->string [book]
  (let [titulo
        (:title book)
        autor
        (authors->string (:authors book))]
    (apply str (interpose ", written by " [titulo autor]) ", written by " )))
(book->string wild-seed)
(defn book->string [book]
  (let [titulo
        (:title book)
        autor
        (authors->string (:authors book))]
    (apply str (interpose ", written by " [titulo autor]))))
(book->string wild-seed)
(defn book->string [book]
  (let [titulo
        (:title book)
        autor
        (authors->string (:authors book))]
    (apply str (interpose ", written by " [titulo autor "."]))))
(book->string wild-seed)
(defn book->string [book]
  (let [titulo
        (:title book)
        autor
        (authors->string (:authors book))]
    (apply str (interpose ", written by " [titulo autor]))))
(book->string wild-seed)
(defn books->string [books]
  (let [book-str (fn [book]
                   (str (books->string book) "."))
        book-strs (map book-str books)]
    (cond
      (= (count books) 1) (apply str (count books)" book. "(first book-strs))
      (> (count books) 1) (apply str (count books)" books. "(first book-strs))
      :else "No books.")))
(book->string wild-seed)
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (apply str (count books)" book. "(map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(book->string wild-seed)
(defn book->string [book]
  (let [titulo
        (:title book)
        autor
        (authors->string (:authors book))]
    (apply str (interpose ", written by " [titulo autor]) ".")))
(book->string wild-seed)
(defn book->string [book]
  (let [titulo
        (:title book)
        autor
        (authors->string (:authors book))]
    (apply str (interpose ", written by " [titulo autor]) (str (".")))))
(book->string wild-seed)
(defn books->string [books]
  (cond
    (= (count books) 1) (str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(books->string [])
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (str (count books)" book. "(apply book->string books))
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (str (count books)" book. "(apply book->string books) ".")
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (str (count books)" book. "(map book->string books) ".")
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books) ".")
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(books->string [cities])
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books)) 
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books"))
(books->string [little-schemer, cities, wild-seed])
(defn book->string [book]
  (let [titulo
        (:title book)
        autor
        (authors->string (:authors book))]
    (apply str (interpose ", written by " [titulo autor]))))
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (str (count books)" book. "(map book->string books) ".")
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books"))
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (str (count books)" book. "(map book->string books))
    (> (count books) 1) (str (count books)" books. "(map book->string books))
    :else "No books"))
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(map book->string books))
    :else "No books."))
(books->string [])
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)))
    :else "No books."))
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)) str("."))
    :else "No books."))
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)) (str(".")))
    :else "No books."))
(books->string [little-schemer, cities, wild-seed])
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books))
    :else "No books."))
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books))
    :else "No books.")))
(books->string [cities])
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books))
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)))
    :else "No books."))
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (concat(apply str (count books)" book. "(map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)))
    :else "No books."))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply concat(str (count books)" book. "(map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)))
    :else "No books."))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (str (str (count books)" book. "(map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)))
    :else "No books."))
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books) ".")
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)))
    :else "No books.")
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(map book->string books) ".")
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)))
    :else "No books."))
(books->string [cities])
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(str(map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)))
    :else "No books."))
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(str(map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)))
    :else "No books."))
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(str(map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)))
    :else "No books."))
(books->string [cities])
(books->string [little-schemer, cities, wild-seed])
k(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(apply str(map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(map book->string books)))
    :else "No books."))
(books->string [little-schemer, cities, wild-seed])
(books->string [cities])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(apply str(map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(apply str(map book->string books))".")
    :else "No books."))
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(apply str(map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(interpose " | "(apply str(map book->string books)))".")
    :else "No books."))
(books->string [cities])
(books->string [little-schemer, cities, wild-seed])
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(apply str(map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(apply str(interpose " | "(map book->string books)))".")
    :else "No books."))
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(apply str(map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(apply str(interpose " | "(map book->string books)))".")
    :else "No books."))
(books->string [little-schemer, cities, wild-seed])
(defn living-authors [authors]
  (filter alive? authors))
(living-authors authors)   
(def jrrtolkien {:name "J. R. R. Tolkien" :birth-year 1892 :death-year 1973})
(def christopher {:name "Christopher Tolkien" :birth-year 1924})
(def kay {:name "Guy Gavriel Kay" :birth-year 1954})
(def silmarillion {:title "Silmarillion"
                   :authors #{jrrtolkien, christopher, kay}})
(def dick {:name "Philip K. Dick", :birth-year 1928, :death-year 1982})
(def zelazny {:name "Roger Zelazny", :birth-year 1937, :death-year 1995})
(def deus-irae {:title "Deus Irae", :authors #{dick, zelazny}})
(defn has-a-living-author? [book]
  (not (empty? (filter alive? (:authors book)))))
(has-a-living-author? wild-seed)  
(has-a-living-author? silmarillion)
(defn books-by-living-authors [books]
  (filter (fn [book] (alive? author)) books))
(defn books-by-living-authors [books]
  (first (filter (fn [book] (has-a-living-author? book)) books)))
(books-by-living-authors books)
(defn books-by-living-authors [books]
  (filter (fn [book] (has-a-living-author? book)) books))
(books-by-living-authors books)
(defn books->string [books]
  (cond
    (= (count books) 1) (apply str (count books)" book. "(apply str (map book->string books)) ".")
    (> (count books) 1) (apply str (count books)" books. "(apply str (interpose " | "(map book->string books)))".")
    :else "No books."))
(books->string [])
(books->string [cities])
(books->string [little-schemer, cities, wild-seed])
