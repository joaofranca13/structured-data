(defn do-a-thing [x]
  (let [xx (* x x)]
    (Math/pow (+ xx xx))))
(defn do-a-thing [x]
(let [xx (* x x)
exit
(defn spiff [v]
  (let [a (get [v] 1)
        b (get [v] 3)]
    (+ a b)))
(spiff [1 2 3])
(defn spiff [v]
  (let [a (get v 1)
        b (get v 3)]
    (+ a b)))
(spiff [1 2 3])
(defn spiff [v]
  (let [a (get v 0)
        b (get v 2)]
    (+ a b)))
(spiff [1 2 3])
(spiff [1 2 3 4 5 6])
(spiff [1 2])
(spiff [])
exit
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(defn author-count [book]
  (count (get book :authors)))
(author-count cities) 
(author-count wild-seed)  
(author-count little-schemer)
(defn multiple-authors? [book]
  (if (> (author-count) 1) true false))
(multiple-authors? cities)
(defn multiple-authors? [book]
  (if (> (author-count book) 1) true false))
(multiple-authors? cities)
(multiple-authors? wild-seed)
(multiple-authors? little-schemer)
(defn add-author [book new-author]
  (let [new-book (assoc book new-author)])
  new-book)
(defn add-author [book new-author]
  (let [new-book (assoc book new-author)]
    new-book))
(add-author little-schemer {:name "Gerald J. Sussman"})
(defn add-author [book new-author]
  (let [new-book (assoc book new-author)]
    new-book))
 (add-author little-schemer {:name "Gerald J. Sussman"})
(assoc cities :awards ["Hugo", "World Fantasy Award",
                       "Arthur C. Clarke Award",
                       "British Science Fiction Award"])
(add-author little-schemer {:name "Gerald J. Sussman"})
(assoc [1 2 3] 4)
(assoc [1 2 3] 2 4)
(assoc [1 2 3] 3 4)
(defn add-author [book new-author]
  (let [new-book (conj book new-author)]
    new-book))
(add-author little-schemer {:name "Gerald J. Sussman"})
(defn add-author [book new-author]
  (let [new-book (conj :authors book new-author)]
    new-book))
(add-author little-schemer {:name "Gerald J. Sussman"})
(defn add-author [book new-author]
  (let [new-book (assoc book :authors[new-author])]
    new-book))
(add-author little-schemer {:name "Gerald J. Sussman"})
(defn add-author [book new-author]
  (let [new-book (conj book new-author)]
    new-book))
(add-author little-schemer {:name "Gerald J. Sussman"})
(defn add-author [book new-author]
  (let [new-book (conj book :authors new-author)]
    new-book))
(add-author little-schemer {:name "Gerald J. Sussman"})
(defn add-author [book new-author]
  (let [new-book (conj (book :authors) new-author)]
    new-book))
(add-author little-schemer {:name "Gerald J. Sussman"})
(defn add-author [book new-author]
  (let [new-book (conj book new-author)]
    new-book)
(add-author little-schemer {:name "Gerald J. Sussman"})
(defn add-author [book new-author]
  (let [new-book (conj book new-author)]
    new-book))
(add-author little-schemer {:name "Gerald J. Sussman"})
(defn add-author [book new-author]
  (let [author (get book :authors) 
        new-book (conj author new-author)]
    new-book))
(add-author little-schemer {:name "Gerald J. Sussman"})
(defn add-author [book new-author]
  (let [author (get book :authors) 
        new-authors(conj author new-author)]
    (assoc book new-authors)))
(add-author little-schemer {:name "Gerald J. Sussman"})
(defn add-author [book new-author]
  (let [author (get book :authors) 
        new-authors(conj author new-author)]
    (assoc book :authors new-authors)))
(add-author little-schemer {:name "Gerald J. Sussman"})
(add-author {:authors [{:name "Juhana"}]} {:name "Jani"})
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})(defn alive? [author]
  (contains? author :death-year))
(alive? china)
(defn alive? [author]
  (contains? (get author :authors) :death-year))
(alive? china)
(defn alive? [author]
  (not (contains? (get author :authors) :death-year)))
(alive? china)
(alive? octavia)
(defn alive? [author]
  (contains? author :death-year))
(alive? china)
(alive? octavia)
(defn alive? [author]
  (not (contains? author :death-year)))
(alive? china)
(alive? octavia)
exit
(defn munge [x]
  (+ x 42))
(map munge [1 2 3 4])
(count "batata")
(defn element-lengths [collection]
  (map (count collection)))
(element-lengths ["foo" "bar" "" "quux"]
)
(element-lengths ["foo" "bar" "" "quux"])
(defn element-lengths [collection]
  (let [munge (fn [x] (count x))]
    (map munge collection)))
(element-lengths ["foo" "bar" "" "quux"])
(element-lengths ["x" [:a :b :c] {:y 42}])
(defn element-lengths [collection]
  (let [contar (fn [x] (count x))]
    (map contar collection)))
(element-lengths ["foo" "bar" "" "quux"]) 
(element-lengths ["x" [:a :b :c] {:y 42}])
(get [1 2 3] 0)
(get [1 2 3] 1)
(defn second-elements [collection]
  (let [segundo-item (fn [x] (get x 1))]
    (map segundo-item collection)))
(second-elements [[1 2] [2 3] [3 4]])
(second-elements [[1 2 3 4] [1] ["a" "s" "d" "f"]])
(def china {:name "China Miéville", :birth-year 1972})
(def octavia {:name "Octavia E. Butler"
              :birth-year 1947
              :death-year 2006})
(def friedman {:name "Daniel Friedman" :birth-year 1944})
(def felleisen {:name "Matthias Felleisen"})
(def cities {:title "The City and the City" :authors [china]})
(def wild-seed {:title "Wild Seed", :authors [octavia]})
(def embassytown {:title "Embassytown", :authors [china]})
(def little-schemer {:title "The Little Schemer"
                     :authors [friedman, felleisen]})
(def books [cities, wild-seed, embassytown, little-schemer])
(defn titles [books]
  (map :title books))
(titles [cities])
(titles books)
(concat (map author-names [cities, wild-seed]))
(apply + [1 2 3])
(concat ["China Miéville"] ["Octavia E. Butler"])
(apply concat [["China Miéville"] ["Octavia E. Butler"]])
(repeat 5 "*")
(defn stars [n]
  (apply concat (repeat n "*")))
(stars 1)
(stars 7)
(defn stars [n]
  (concat (repeat n "*")))
(stars 7)
(defn stars [n]
  (apply concat [(repeat n "*")]))
(stars 1)
(stars 7)
(defn stars [n]
  (apply concat (repeat n "*")))
(stars 1)
(defn stars [n]
  (apply concat [(repeat n *)]))
(stars 1)
k(defn stars [n]
  (apply str [(repeat n "*")]))
(defn stars [n]
  (apply str [(repeat n "*")]))
(stars 1)
(stars 2)
j(defn stars [n]
  (apply str (repeat n "*")))
(defn stars [n]
  (apply str (repeat n "*")))
(stars 1)
(stars 2)
(stars 5)
(defn monotonic? [a-seq]
  (apply >= [a-seq]))
(monotonic? [1 2 3])
(monotonic? [1 2 3])(monotonic? [1 2 3])
(monotonic? [1 2 1 0])
(defn monotonic? [a-seq]
  (cond
    (apply >= a-seq)
    (apply <= a-seq)
    :else false))
(monotonic? [1 2 3])
(defn monotonic? [a-seq]
  (if (apply <= a-seq))
)
(defn monotonic? [a-seq]
  (if (or (apply <= a-seq) (apply >= a-seq) true)))
(defn monotonic? [a-seq]
  (if (or (apply <= a-seq) (apply >= a-seq))))
(defn monotonic? [a-seq]
  (if (or (apply <= a-seq) (apply >= a-seq)) true false))
(monotonic? [1 2 3])
(monotonic? [0 1 10 11])
(monotonic? [3 2 0 -3])
(monotonic? [3 2 2])
(monotonic? [1 2 1 0])
(set [1 2 3 1 1 1 3 3 2 1])
(defn toggle [a-set elem]
  (if (contains? a-set elem) (disj a-set elem) (conj a-set elem))
)
(toggle #{:a :b :c} :d)
(toggle #{:a :b :c} :a) 
(toggle #{:a :b :c} :d)
exit
